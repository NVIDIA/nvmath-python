# Copyright (c) 2024, NVIDIA CORPORATION & AFFILIATES. ALL RIGHTS RESERVED.
#
# SPDX-License-Identifier: Apache-2.0

[build-system]
requires = [
    "Cython>=0.29.22,<3", "setuptools>=61.0.0", "wheel>=0.34.0", "packaging",
    # whatever version works here, see builder/utils.py for detail
    "nvidia-cuda-runtime-cu12",
    "nvidia-cuda-nvcc-cu12",
]
build-backend = "pep517"
backend-path = ["builder"]


[project]
name = "nvmath-python"
dynamic = [
    "version",
    "readme",
    "dependencies",
    "optional-dependencies"
]
requires-python = '>=3.10,<3.13'
description = "NVIDIA Math Python libraries"
authors = [
    { name = "NVIDIA Corporation" }
]
license = {text = "Apache-2.0"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: End Users/Desktop",
    "Natural Language :: English",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Topic :: Education",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Environment :: GPU :: NVIDIA CUDA",
    "Environment :: GPU :: NVIDIA CUDA :: 11",
    "Environment :: GPU :: NVIDIA CUDA :: 12",
]

[tool.setuptools.dynamic]
version = { attr = "nvmath._version.__version__" }
readme = { file = ["DESCRIPTION.rst"], content-type = "text/x-rst" }
dependencies = {file = ["requirements/pip/nvmath-python.txt"] }

[tool.setuptools.dynamic.optional-dependencies]
cpu = { file = ["requirements/pip/nvmath-python-cpu.txt"] }
cu11 = { file = ["requirements/pip/nvmath-python-cu11.txt"] }
cu12 = { file = ["requirements/pip/nvmath-python-cu12.txt"] }
dx = { file = ["requirements/pip/nvmath-python-dx.txt"] }
sysctk11 = { file = ["requirements/pip/nvmath-python-sysctk11.txt"] }
sysctk12 = { file = ["requirements/pip/nvmath-python-sysctk12.txt"] }
sysctk12-dx = { file = ["requirements/pip/nvmath-python-sysctk12-dx.txt"] }

[tool.ruff]
line-length = 128
# Don't format autogenerated files
exclude = ["nvmath/device/curand_kernel.py"]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 88

[tool.ruff.lint.pycodestyle]
max-doc-length = 92
max-line-length = 128

[tool.ruff.lint]
select = [
    # pycodestyle Error
    "E",
    # Pyflakes
    "F",
    # pycodestyle Warning
    "W",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
]
ignore = [
    # FIXME
    # This list of ignored rules should be reduced. Many will be handled
    # automatically when enabling ruff-format.
    "B007",
    "B017",
    "B023",
    "B028",
    "B904",
    "I001",
    "SIM105",
    "SIM108",
    # Ignore module-import-not-at-top-of-file
    "E402",
    # Ignore multiple-statements-on-one-line-colon
    "E701",
    # Ignore multiple-statements-on-one-line-semicolon
    "E702",
    # Ignore bare-except
    "E722",
    # Ignore lambda-assignment
    "E731",
    # Ignore ambiguous-variable-name
    "E741",
    # Ignore unused-import
    "F401",
    # Ignore undefined-local-with-import-star
    "F403",
    # Ignore undefined-local-with-import-star-usage
    "F405",
]
fixable = ["ALL"]

[tool.codespell]
# Notebooks contain binary encoded images which can cause fall positives
# Words like 'foF' have been added to the ignore-words-list for this reason
# skip = "*.ipynb"
ignore-words-list = "COO,FO,inout,matA,matB,matC,unix,braket,foF,ND,halfs,bU,unx,crate"
write-changes = ""

[tool.mypy]
python_version = "3.10"
disable_error_code = "import-untyped"
files = [
    "nvmath/**/*.py",
]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
    "nvmath.device.cublasdx_backend.TransposeMode",
    "nvmath._internal.package_ifc.StreamHolder",
]
