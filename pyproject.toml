# Copyright (c) 2024-2025, NVIDIA CORPORATION & AFFILIATES. ALL RIGHTS RESERVED.
#
# SPDX-License-Identifier: Apache-2.0

[build-system]
requires = [
    # 3.1.{0|1}: https://github.com/cython/cython/issues/6841
    "Cython>=3.0.4,!=3.1.0,!=3.1.1",
    "setuptools>=77.0.3",
    "tomli>=2.0.1; python_version < '3.11'",
    # whatever version works here, see builder/utils.py for detail
    "nvidia-cuda-runtime-cu11",
    "nvidia-cuda-nvcc-cu11",
    # needed for internal/bindings
    "cuda-bindings==11.8.7",
    # needed for internal/bindings (cuda.bindings.cydriver)
    "nvidia-cuda-profiler-api-cu11",
]
build-backend = "setuptools.build_meta"


[project]
name = "nvmath-python"
version = "0.6.0"
dynamic = [
    "readme",
    "dependencies",
    "optional-dependencies"
]
requires-python = '>=3.10,<3.14'
description = "NVIDIA Math Python libraries"
authors = [
    { name = "NVIDIA Corporation" }
]
license = "Apache-2.0"
license-files = ["LICENSE"]

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: End Users/Desktop",
    "Natural Language :: English",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Topic :: Education",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Environment :: GPU :: NVIDIA CUDA",
    "Environment :: GPU :: NVIDIA CUDA :: 11",
    "Environment :: GPU :: NVIDIA CUDA :: 12",
]

[tool.setuptools]
py-modules = ["builder"]
include-package-data = false

[tool.setuptools.cmdclass]
build_ext = "builder.utils.build_ext"

[tool.setuptools.packages.find]
include = ["nvmath", "nvmath.*"]

[tool.setuptools.package-data]
'*' = ["*.pxd", "copy_kernel/*.h", "copy_kernel_impl/*.h"]

[tool.setuptools.dynamic]
readme = { file = ["DESCRIPTION.rst"], content-type = "text/x-rst" }
dependencies = {file = ["requirements/pip/nvmath-python.txt"] }

[tool.setuptools.dynamic.optional-dependencies]
cpu = { file = ["requirements/pip/nvmath-python-cpu.txt"] }
cu11 = { file = ["requirements/pip/nvmath-python-cu11.txt"] }
cu12 = { file = ["requirements/pip/nvmath-python-cu12.txt"] }
cu12-distributed = { file = ["requirements/pip/nvmath-python-cu12.txt", "requirements/pip/nvmath-python-cu12-distributed.txt"] }
dx = { file = ["requirements/pip/nvmath-python-dx.txt"] }
sysctk11 = { file = ["requirements/pip/nvmath-python-sysctk11.txt"] }
sysctk12 = { file = ["requirements/pip/nvmath-python-sysctk12.txt"] }
sysctk12-dx = { file = ["requirements/pip/nvmath-python-sysctk12.txt", "requirements/pip/nvmath-python-sysctk12-dx.txt"] }

[[tool.setuptools.ext-modules]]
name="nvmath.bindings._internal.utils"
sources=["nvmath/bindings/_internal/utils.pyx"]
language="c++"

[tool.nvmath-bindings]
modules = [
    "nvmath.bindings.cublas",
    "nvmath.bindings.cudss",
    "nvmath.bindings.cublasLt",
    "nvmath.bindings.cusolver",
    "nvmath.bindings.cusolverDn",
    "nvmath.bindings.cufft",
    "nvmath.bindings.cusparse",
    "nvmath.bindings.curand",
    "nvmath.bindings.mathdx",
]
linux_modules = [
    "nvmath.bindings.nvpl.fft",
    "nvmath.bindings.cufftMp",
    "nvmath.bindings.nvshmem",
]
internal_modules = [
    "nvmath.internal.bindings",
    "nvmath.internal.memory",
    "nvmath.internal.ndbuffer.jit",
    "nvmath.internal.ndbuffer.data_layout",
    "nvmath.internal.ndbuffer.copy_kernel",
    "nvmath.internal.ndbuffer.ndbuffer",
    "nvmath.internal.ndbuffer.package_utils",
]

[tool.ruff]
line-length = 128
# Don't format autogenerated files
exclude = [
    "nvmath/device/curand_kernel.py",
    "nvmath/bindings",
    "nvmath/internal/memory.pyi",
    "nvmath/internal/ndbuffer/*.pyi",
]
# Check against minimal supported version Python 3.10
target-version = "py310"


[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 88

[tool.ruff.lint.pycodestyle]
max-doc-length = 92
max-line-length = 128

[tool.ruff.lint]
select = [
    # pycodestyle Error
    "E",
    # Pyflakes
    "F",
    # pycodestyle Warning
    "W",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # flake8-comprehensions
    "C4",
]
ignore = [
    # FIXME
    # This list of ignored rules should be reduced. Many will be handled
    # automatically when enabling ruff-format.
    "B007",
    "B017",
    "B023",
    "B028",
    "B904",
    "I001",
    "SIM105",
    "SIM108",
    # Ignore multiple-statements-on-one-line-colon
    "E701",
    # Ignore multiple-statements-on-one-line-semicolon
    "E702",
    # Ignore bare-except
    "E722",
    # Ignore lambda-assignment
    "E731",
    # Ignore ambiguous-variable-name
    "E741",
]
fixable = ["ALL"]

[tool.codespell]
ignore-words-list = "FO,inout,matA,matB,matC,unix,braket,ND,halfs,coo"
write-changes = ""
# base64 workaround
# https://github.com/codespell-project/codespell/issues/2801
ignore-regex = '[A-Za-z0-9+/]{100,}'
exclude = [
    "nvmath/device/curand_kernel.py",
]
skip = "nvmath/bindings/*"

[tool.mypy]
python_version = "3.10"
disable_error_code = "import-untyped"
explicit_package_bases = true

# Don't check autogenerated files
[[tool.mypy.overrides]]
module = "nvmath.bindings.*"
ignore_errors = true

# This is cythonized module with stubgen generated stub
[[tool.mypy.overrides]]
module = "nvmath.internal.memory"
ignore_errors = true

# This is cythonized module with stubgen generated stub
[[tool.mypy.overrides]]
module = "nvmath.internal.ndbuffer.*"
ignore_errors = true

# TODO: add support
[[tool.mypy.overrides]]
module = "examples.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "internal.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "docs.*"
ignore_errors = true

# FIXME: Stop ignoring mpi4py when wheel is published
[[tool.mypy.overrides]]
module = ["mpi4py.*"]
ignore_missing_imports = true

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
    "nvmath.device.cublasdx_backend.TransposeMode",
]
